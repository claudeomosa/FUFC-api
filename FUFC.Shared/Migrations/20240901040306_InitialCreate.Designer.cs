// <auto-generated />
using System;
using FUFC.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FUFC.Shared.Migrations
{
    [DbContext(typeof(UfcContext))]
    [Migration("20240901040306_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FUFC.Shared.Models.Bout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BlueCornerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsForTitle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInMainCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainEvent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrelim")
                        .HasColumnType("boolean");

                    b.Property<string>("RedCornerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefereeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlueCornerId");

                    b.HasIndex("EventId");

                    b.HasIndex("RedCornerId");

                    b.HasIndex("RefereeId");

                    b.ToTable("Bouts");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPpv")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Fighter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("Champion")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FighterImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("GymId")
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("HomeCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("InterimChampion")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRanked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PredominantStyle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<double>("Reach")
                        .HasColumnType("double precision");

                    b.Property<string>("Stance")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<string>("WeightClass")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("Fighters");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Gym", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("HeadCoach")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IsGoodFor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Referee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Bout", b =>
                {
                    b.HasOne("FUFC.Shared.Models.Fighter", "BlueCorner")
                        .WithMany()
                        .HasForeignKey("BlueCornerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUFC.Shared.Models.Event", "Event")
                        .WithMany("Bouts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUFC.Shared.Models.Fighter", "RedCorner")
                        .WithMany()
                        .HasForeignKey("RedCornerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUFC.Shared.Models.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FUFC.Shared.Models.BoutResult", "Result", b1 =>
                        {
                            b1.Property<string>("BoutId")
                                .HasColumnType("text");

                            b1.Property<string>("Method")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "method");

                            b1.Property<int>("Round")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "round");

                            b1.Property<string>("Winner")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "winner");

                            b1.HasKey("BoutId");

                            b1.ToTable("Bouts");

                            b1.ToJson("Result");

                            b1.WithOwner()
                                .HasForeignKey("BoutId");
                        });

                    b.Navigation("BlueCorner");

                    b.Navigation("Event");

                    b.Navigation("RedCorner");

                    b.Navigation("Referee");

                    b.Navigation("Result")
                        .IsRequired();
                });

            modelBuilder.Entity("FUFC.Shared.Models.Fighter", b =>
                {
                    b.HasOne("FUFC.Shared.Models.Gym", "Gym")
                        .WithMany("Fighters")
                        .HasForeignKey("GymId");

                    b.OwnsOne("FUFC.Shared.Models.FighterRecord", "Record", b1 =>
                        {
                            b1.Property<string>("FighterId")
                                .HasColumnType("text");

                            b1.Property<int>("Draws")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "draws");

                            b1.Property<int>("Losses")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "losses");

                            b1.Property<int>("LossesByDecision")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "losses_by_decision");

                            b1.Property<int>("LossesByKoOrTko")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "losses_by_ko_or_tko");

                            b1.Property<int>("LossesBySub")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "losses_by_sub");

                            b1.Property<int>("NoContests")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "no_contests");

                            b1.Property<int>("Wins")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "wins");

                            b1.Property<int>("WinsByDecision")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "wins_by_decision");

                            b1.Property<int>("WinsByKoOrTko")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "wins_by_ko_or_tko");

                            b1.Property<int>("WinsBySub")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "wins_by_sub");

                            b1.HasKey("FighterId");

                            b1.ToTable("Fighters");

                            b1.ToJson("Record");

                            b1.WithOwner()
                                .HasForeignKey("FighterId");
                        });

                    b.OwnsOne("FUFC.Shared.Models.FighterSkillStats", "SkillStats", b1 =>
                        {
                            b1.Property<string>("FighterId")
                                .HasColumnType("text");

                            b1.Property<TimeSpan>("AverageFightTime")
                                .HasColumnType("interval")
                                .HasAnnotation("Relational:JsonPropertyName", "average_fight_time");

                            b1.Property<double>("AverageStrikesAbsorbedPerMinute")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "average_strikes_absorbed_per_minute");

                            b1.Property<double>("AverageStrikesLandedPerMinute")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "average_strikes_landed_per_minute");

                            b1.Property<double>("StrikingAccuracy")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "striking_accuracy");

                            b1.Property<double>("StrikingDefense")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "striking_defense");

                            b1.Property<double>("SubmissionAverage")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "submission_average");

                            b1.Property<double>("TakedownAccuracy")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "takedown_accuracy");

                            b1.Property<double>("TakedownAverage")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "takedown_average");

                            b1.Property<double>("TakedownDefense")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "takedown_defense");

                            b1.HasKey("FighterId");

                            b1.ToTable("Fighters");

                            b1.ToJson("SkillStats");

                            b1.WithOwner()
                                .HasForeignKey("FighterId");
                        });

                    b.OwnsOne("FUFC.Shared.Models.SocialMedia", "SocialMedia", b1 =>
                        {
                            b1.Property<string>("FighterId")
                                .HasColumnType("text");

                            b1.Property<string>("Facebook")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<string>("Instagram")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<string>("Twitter")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.HasKey("FighterId");

                            b1.ToTable("Fighters");

                            b1.ToJson("SocialMedia");

                            b1.WithOwner()
                                .HasForeignKey("FighterId");
                        });

                    b.Navigation("Gym");

                    b.Navigation("Record")
                        .IsRequired();

                    b.Navigation("SkillStats");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Event", b =>
                {
                    b.Navigation("Bouts");
                });

            modelBuilder.Entity("FUFC.Shared.Models.Gym", b =>
                {
                    b.Navigation("Fighters");
                });
#pragma warning restore 612, 618
        }
    }
}
